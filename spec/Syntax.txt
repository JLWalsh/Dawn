### Dawn Syntax

program         -> (moduledecl | funcdecl)*

import          -> "import" accessor

export          -> decl

decl            -> objectdecl
                | moduledecl
                | funcdecl
                | valdecl

moduledecl      -> "module" IDENTIFIER "{" (decl | export)* "}"

objectdecl      -> "object" IDENTIFIER "{" objectvaldecl* "}"

objectvaldecl   -> IDENTIFIER ":" IDENTIFIER

valdecl         -> "val" IDENTIFIER "=" expr


funcdecl        -> IDENTIFIER "(" (fundeclcarg ","?)* ")" (":" IDENTIFIER)? funcdeclbody

funcdeclarg     -> IDENTIFIER ":" IDENTIFIER

funcdeclbody    -> "{" statement* "}"

statement       -> return
                |  valdecl
                |  expr

return          -> expr

expr            -> equality

equality        -> comparison ( ( "!=" | "==" ) comparison )*

comparison      -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )*

addition        -> multiplication ( ( "-" | "+" ) multiplication )*

multiplication  -> unary ( ( "/" | "*" ) unary )*

unary           -> ( "!" | "-" ) unary
                | literal

literal         -> NUMBER | STRING | BOOLEAN
                | "(" expression ")"
                | undefliteral

undefliteral    -> valaccessor
                 | inst

accessor        -> IDENTIFIER ("." accessor)?

valaccessor     -> accessor invocation?

inst            -> accessor "{" ((keyinst | orderedinst) ","?)* "}"

keyinst         -> IDENTIFIER ":" expr

orderedinst     -> expr

invocation      -> "(" (expr ","?)* ")"
