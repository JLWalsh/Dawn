import math
import io

module test {

    object a {}

    export object b {}

    test() {
        val x = shapes.PI
    }
}

module shapes {

    export val PI = 3.1416f

    export object Rectangle {
        width: int,
        height: int,
        a: test.a
        b: test.b
    }

    val permanent = Rectangle { 20i, 30i }

    export calculateArea(rect: Rectangle): int {
        return rect.width * rect.height
    }

    export diagonalLength(rect: Rectangle): float {
        val area = calculateArea(rect)
        # Resolve symbol calculateArea in scope shapes
        # Ensure calculateArea is a function
        # Ensure prototype exists for calculateArea(Rectangle)
        # Add area of type int to currentScope
        return math.sqrt(math.pow(rect.width, 2i) + math.pow(rect.height, 2i))
    }
}

main() {
    val rectangle = shapes.Rectangle { 30i, 45i }

    io.print(shapes.calculateArea(rectangle))
    io.print(shapes.diagonalLength(rectangle))
}
